#!/usr/bin/env bash

## CONFIGURATION ##############################################################
BLANK='#00000000'
CLEAR='#2e3440'
DEFAULT='#81a1c1'
TEXT='#ffffffee'
WRONG='#900000'
VERIFYING='#2e3440'

# Options to pass to i3lock
i3lock_options="--insidever-color=$CLEAR    \
--ringver-color=$VERIFYING                  \
\
--insidewrong-color=$CLEAR                  \
--ringwrong-color=$WRONG                    \
\
--inside-color=$BLANK                       \
--ring-color=$DEFAULT                       \
--line-color=$BLANK                         \
--separator-color=$DEFAULT                  \
\
--verif-color=$TEXT                         \
--wrong-color=$TEXT                         \
--time-color=$TEXT                          \
--date-color=$TEXT                          \
--layout-color=$TEXT                        \
--keyhl-color=$WRONG                        \
--bshl-color=$WRONG                         \
\
--radius 250                                \
--blur 8                                    \
--clock                                     \
--indicator                                 \
--time-str=%H:%M:%S                         \
--greeter-pos="ix:iy+100"                   \
"

# Run before starting the locker
pre_lock() {
    #mpc pause
    if [[ "$(playerctl -p spotify status)" =~ "Playing" ]]
    then
      playerctl -p spotify pause
    fi
    return
}

# Run after the locker exits
post_lock() {
    if [[ "$(playerctl -p spotify status)" =~ "Paused" ]]
    then
      playerctl -p spotify play
    fi
    return
}

###############################################################################

pre_lock
# We set a trap to kill the locker if we get killed, then start the locker and
# wait for it to exit. The waiting is not that straightforward when the locker
# forks, so we use this polling only if we have a sleep lock to deal with.
if [[ -e /dev/fd/${XSS_SLEEP_LOCK_FD:--1} ]]; then
    kill_i3lock() {
        pkill -xu $EUID "$@" i3lock
    }

    trap kill_i3lock TERM INT

    # we have to make sure the locker does not inherit a copy of the lock fd
    i3lock -n $i3lock_options --date-str="%A, %Y-%m-%d" --greeter-text="Welcome, Gazzelle" {XSS_SLEEP_LOCK_FD}<&-

    # now close our fd (only remaining copy) to indicate we're ready to sleep
    exec {XSS_SLEEP_LOCK_FD}<&-

    while kill_i3lock -0; do
        sleep 0.5
    done
else
    trap 'kill %%' TERM INT
    i3lock -n $i3lock_options --date-str="%A, %Y-%m-%d" --greeter-text="Welcome, Gazzelle" &
    wait
fi

post_lock

